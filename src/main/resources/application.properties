# параметры подключения к базе данных
# serverTimezone=UTC - указание временной зоны
# cachePrepStmts - включение кеширования запросов
# useServerPrepStmts - использование кеша сервера БД
# rewriteBatchedStatements - оптимизация для MySQL
# createDatabaseIfNotExist - создавать базу данных, если не существует
spring.datasource.url=jdbc:mysql://localhost:3306/vadkosto?serverTimezone=UTC&cachePrepStmts=true&useServerPrepStmts=true&rewriteBatchedStatements=true&createDatabaseIfNotExist=true
spring.datasource.username=db
spring.datasource.password=root

# диалект и engine общения hibernate с базой данных
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
spring.jpa.properties.hibernate.dialect.storage_engine=innodb

# указание hibernate при запуске удалять все таблицы базы данных,
# создавать и настраивать новые в соответствии с нашей моделью
# установлено create для целей тестирования
spring.jpa.hibernate.ddl-auto=update
# показывать или нет sql-запросы в консоли
spring.jpa.show-sql=false

# disable OSIV
spring.jpa.open-in-view=false

# для пакетной вставки batch insert - величина зависит от мощности выделенных ресурсов и настроек JVM
# установленное значение оказалось оптимальным в моих условиях
spring.jpa.properties.hibernate.jdbc.batch_size=152

# для упорядоченной вставки связанных объектов
spring.jpa.properties.hibernate.order_inserts=true

# предотвращает лишние join (вернее все не явные)
spring.jpa.properties.hibernate.max_fetch_depth=0

# кэш второго уровня
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.region.factory_class=infinispan
spring.jpa.properties.hibernate.cache.infinispan.cfg=infinispan.xml

# логирование
logging.level.ROOT=INFO
logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=WARN
logging.level.org.springframework.orm.jpa=WARN
logging.level.org.springframework.transaction=WARN
logging.level.org.springframework.transaction.interceptor=WARN
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN
logging.level.com.zaxxer.hikari.HikariConfig=WARN
logging.level.com.zaxxer.hikari=WARN

# особые настройки приложения

# имя XML-файла входящих данных с путем от корня проекта или полный путь к файлу
spring.jpa.properties.app.source.file=Java_test.xml

# желательное количество потоков для записи данных в БД
# текущее значение - количество логических процессоров минус 1 оказалось оптимальным в моих условиях
spring.jpa.properties.app.sql.threads=3

# количество последовательных попыток выполнить транзакцию для текущего пакета данных
spring.jpa.properties.app.try.attempts=10

# количество ошибок добавления транзакций прежде чем принудительно завершить приложение.
# прежде чем счетчик ошибок увеличивается приложение пытается добавить транзакции столько раз,
# сколько указано в ${spring.jpa.properties.app.try.attempts}
# кроме того, счетчик увеличивается при каждой неудачной попытке вернуть данные в хранилище StoreService
spring.jpa.properties.app.errors.count.before.terminate=10000

# выполнять предварительную проверку файла на недопустимые значения при создании сущностей
# приложение сначала разберет весь файл не сохраняя данные
# и только при отсутствии ошибок приступит к загрузке в БД разбирая файл заново
spring.jpa.properties.app.parser.errors.check=false

# максимальное количество пакетов хранящихся в хранилище транзакций, при достижении которого parseService
# приостанавливает добавление новых. Таким образом, общее максимальное количество транзакций равняется этому параметру
# умноженному на размер пакета установленного в spring.jpa.properties.hibernate.jdbc.batch_size
spring.jpa.properties.app.store.batch.amount=100